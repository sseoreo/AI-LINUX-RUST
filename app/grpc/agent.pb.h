// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_agent_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_agent_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_agent_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_agent_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_agent_2eproto;
namespace agent {
class IrisInferenceRequest;
struct IrisInferenceRequestDefaultTypeInternal;
extern IrisInferenceRequestDefaultTypeInternal _IrisInferenceRequest_default_instance_;
class IrisInferenceResponse;
struct IrisInferenceResponseDefaultTypeInternal;
extern IrisInferenceResponseDefaultTypeInternal _IrisInferenceResponse_default_instance_;
class MnistInferenceRequest;
struct MnistInferenceRequestDefaultTypeInternal;
extern MnistInferenceRequestDefaultTypeInternal _MnistInferenceRequest_default_instance_;
class MnistInferenceResponse;
struct MnistInferenceResponseDefaultTypeInternal;
extern MnistInferenceResponseDefaultTypeInternal _MnistInferenceResponse_default_instance_;
}  // namespace agent
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace agent {

// ===================================================================


// -------------------------------------------------------------------

class MnistInferenceResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agent.MnistInferenceResponse) */ {
 public:
  inline MnistInferenceResponse() : MnistInferenceResponse(nullptr) {}
  ~MnistInferenceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MnistInferenceResponse(::google::protobuf::internal::ConstantInitialized);

  inline MnistInferenceResponse(const MnistInferenceResponse& from)
      : MnistInferenceResponse(nullptr, from) {}
  MnistInferenceResponse(MnistInferenceResponse&& from) noexcept
    : MnistInferenceResponse() {
    *this = ::std::move(from);
  }

  inline MnistInferenceResponse& operator=(const MnistInferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MnistInferenceResponse& operator=(MnistInferenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MnistInferenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MnistInferenceResponse* internal_default_instance() {
    return reinterpret_cast<const MnistInferenceResponse*>(
               &_MnistInferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MnistInferenceResponse& a, MnistInferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MnistInferenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MnistInferenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MnistInferenceResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MnistInferenceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MnistInferenceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MnistInferenceResponse& from) {
    MnistInferenceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MnistInferenceResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.MnistInferenceResponse";
  }
  protected:
  explicit MnistInferenceResponse(::google::protobuf::Arena* arena);
  MnistInferenceResponse(::google::protobuf::Arena* arena, const MnistInferenceResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 1,
  };
  // string file_path = 1;
  void clear_file_path() ;
  const std::string& file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* value);

  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(
      const std::string& value);
  std::string* _internal_mutable_file_path();

  public:
  // @@protoc_insertion_point(class_scope:agent.MnistInferenceResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr file_path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agent_2eproto;
};// -------------------------------------------------------------------

class MnistInferenceRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agent.MnistInferenceRequest) */ {
 public:
  inline MnistInferenceRequest() : MnistInferenceRequest(nullptr) {}
  ~MnistInferenceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MnistInferenceRequest(::google::protobuf::internal::ConstantInitialized);

  inline MnistInferenceRequest(const MnistInferenceRequest& from)
      : MnistInferenceRequest(nullptr, from) {}
  MnistInferenceRequest(MnistInferenceRequest&& from) noexcept
    : MnistInferenceRequest() {
    *this = ::std::move(from);
  }

  inline MnistInferenceRequest& operator=(const MnistInferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MnistInferenceRequest& operator=(MnistInferenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MnistInferenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MnistInferenceRequest* internal_default_instance() {
    return reinterpret_cast<const MnistInferenceRequest*>(
               &_MnistInferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MnistInferenceRequest& a, MnistInferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MnistInferenceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MnistInferenceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MnistInferenceRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MnistInferenceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MnistInferenceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MnistInferenceRequest& from) {
    MnistInferenceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MnistInferenceRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.MnistInferenceRequest";
  }
  protected:
  explicit MnistInferenceRequest(::google::protobuf::Arena* arena);
  MnistInferenceRequest(::google::protobuf::Arena* arena, const MnistInferenceRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFilePathFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string file_path = 2;
  void clear_file_path() ;
  const std::string& file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* value);

  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(
      const std::string& value);
  std::string* _internal_mutable_file_path();

  public:
  // @@protoc_insertion_point(class_scope:agent.MnistInferenceRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr file_path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agent_2eproto;
};// -------------------------------------------------------------------

class IrisInferenceResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agent.IrisInferenceResponse) */ {
 public:
  inline IrisInferenceResponse() : IrisInferenceResponse(nullptr) {}
  ~IrisInferenceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IrisInferenceResponse(::google::protobuf::internal::ConstantInitialized);

  inline IrisInferenceResponse(const IrisInferenceResponse& from)
      : IrisInferenceResponse(nullptr, from) {}
  IrisInferenceResponse(IrisInferenceResponse&& from) noexcept
    : IrisInferenceResponse() {
    *this = ::std::move(from);
  }

  inline IrisInferenceResponse& operator=(const IrisInferenceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrisInferenceResponse& operator=(IrisInferenceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrisInferenceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrisInferenceResponse* internal_default_instance() {
    return reinterpret_cast<const IrisInferenceResponse*>(
               &_IrisInferenceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IrisInferenceResponse& a, IrisInferenceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IrisInferenceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrisInferenceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrisInferenceResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrisInferenceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IrisInferenceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IrisInferenceResponse& from) {
    IrisInferenceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IrisInferenceResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.IrisInferenceResponse";
  }
  protected:
  explicit IrisInferenceResponse(::google::protobuf::Arena* arena);
  IrisInferenceResponse(::google::protobuf::Arena* arena, const IrisInferenceResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeciesFieldNumber = 1,
  };
  // string species = 1;
  void clear_species() ;
  const std::string& species() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_species(Arg_&& arg, Args_... args);
  std::string* mutable_species();
  PROTOBUF_NODISCARD std::string* release_species();
  void set_allocated_species(std::string* value);

  private:
  const std::string& _internal_species() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_species(
      const std::string& value);
  std::string* _internal_mutable_species();

  public:
  // @@protoc_insertion_point(class_scope:agent.IrisInferenceResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr species_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agent_2eproto;
};// -------------------------------------------------------------------

class IrisInferenceRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:agent.IrisInferenceRequest) */ {
 public:
  inline IrisInferenceRequest() : IrisInferenceRequest(nullptr) {}
  ~IrisInferenceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IrisInferenceRequest(::google::protobuf::internal::ConstantInitialized);

  inline IrisInferenceRequest(const IrisInferenceRequest& from)
      : IrisInferenceRequest(nullptr, from) {}
  IrisInferenceRequest(IrisInferenceRequest&& from) noexcept
    : IrisInferenceRequest() {
    *this = ::std::move(from);
  }

  inline IrisInferenceRequest& operator=(const IrisInferenceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IrisInferenceRequest& operator=(IrisInferenceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IrisInferenceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IrisInferenceRequest* internal_default_instance() {
    return reinterpret_cast<const IrisInferenceRequest*>(
               &_IrisInferenceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IrisInferenceRequest& a, IrisInferenceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IrisInferenceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IrisInferenceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IrisInferenceRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IrisInferenceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IrisInferenceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IrisInferenceRequest& from) {
    IrisInferenceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IrisInferenceRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "agent.IrisInferenceRequest";
  }
  protected:
  explicit IrisInferenceRequest(::google::protobuf::Arena* arena);
  IrisInferenceRequest(::google::protobuf::Arena* arena, const IrisInferenceRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSepalLengthFieldNumber = 2,
    kSepalWidthFieldNumber = 3,
    kPetalLengthFieldNumber = 4,
    kPetalWidthFieldNumber = 5,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // float sepal_length = 2;
  void clear_sepal_length() ;
  float sepal_length() const;
  void set_sepal_length(float value);

  private:
  float _internal_sepal_length() const;
  void _internal_set_sepal_length(float value);

  public:
  // float sepal_width = 3;
  void clear_sepal_width() ;
  float sepal_width() const;
  void set_sepal_width(float value);

  private:
  float _internal_sepal_width() const;
  void _internal_set_sepal_width(float value);

  public:
  // float petal_length = 4;
  void clear_petal_length() ;
  float petal_length() const;
  void set_petal_length(float value);

  private:
  float _internal_petal_length() const;
  void _internal_set_petal_length(float value);

  public:
  // float petal_width = 5;
  void clear_petal_width() ;
  float petal_width() const;
  void set_petal_width(float value);

  private:
  float _internal_petal_width() const;
  void _internal_set_petal_width(float value);

  public:
  // @@protoc_insertion_point(class_scope:agent.IrisInferenceRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      37, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    float sepal_length_;
    float sepal_width_;
    float petal_length_;
    float petal_width_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_agent_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IrisInferenceRequest

// string id = 1;
inline void IrisInferenceRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& IrisInferenceRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agent.IrisInferenceRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IrisInferenceRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:agent.IrisInferenceRequest.id)
}
inline std::string* IrisInferenceRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:agent.IrisInferenceRequest.id)
  return _s;
}
inline const std::string& IrisInferenceRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void IrisInferenceRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* IrisInferenceRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* IrisInferenceRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:agent.IrisInferenceRequest.id)
  return _impl_.id_.Release();
}
inline void IrisInferenceRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.IrisInferenceRequest.id)
}

// float sepal_length = 2;
inline void IrisInferenceRequest::clear_sepal_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sepal_length_ = 0;
}
inline float IrisInferenceRequest::sepal_length() const {
  // @@protoc_insertion_point(field_get:agent.IrisInferenceRequest.sepal_length)
  return _internal_sepal_length();
}
inline void IrisInferenceRequest::set_sepal_length(float value) {
  _internal_set_sepal_length(value);
  // @@protoc_insertion_point(field_set:agent.IrisInferenceRequest.sepal_length)
}
inline float IrisInferenceRequest::_internal_sepal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sepal_length_;
}
inline void IrisInferenceRequest::_internal_set_sepal_length(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sepal_length_ = value;
}

// float sepal_width = 3;
inline void IrisInferenceRequest::clear_sepal_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sepal_width_ = 0;
}
inline float IrisInferenceRequest::sepal_width() const {
  // @@protoc_insertion_point(field_get:agent.IrisInferenceRequest.sepal_width)
  return _internal_sepal_width();
}
inline void IrisInferenceRequest::set_sepal_width(float value) {
  _internal_set_sepal_width(value);
  // @@protoc_insertion_point(field_set:agent.IrisInferenceRequest.sepal_width)
}
inline float IrisInferenceRequest::_internal_sepal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sepal_width_;
}
inline void IrisInferenceRequest::_internal_set_sepal_width(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sepal_width_ = value;
}

// float petal_length = 4;
inline void IrisInferenceRequest::clear_petal_length() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.petal_length_ = 0;
}
inline float IrisInferenceRequest::petal_length() const {
  // @@protoc_insertion_point(field_get:agent.IrisInferenceRequest.petal_length)
  return _internal_petal_length();
}
inline void IrisInferenceRequest::set_petal_length(float value) {
  _internal_set_petal_length(value);
  // @@protoc_insertion_point(field_set:agent.IrisInferenceRequest.petal_length)
}
inline float IrisInferenceRequest::_internal_petal_length() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.petal_length_;
}
inline void IrisInferenceRequest::_internal_set_petal_length(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.petal_length_ = value;
}

// float petal_width = 5;
inline void IrisInferenceRequest::clear_petal_width() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.petal_width_ = 0;
}
inline float IrisInferenceRequest::petal_width() const {
  // @@protoc_insertion_point(field_get:agent.IrisInferenceRequest.petal_width)
  return _internal_petal_width();
}
inline void IrisInferenceRequest::set_petal_width(float value) {
  _internal_set_petal_width(value);
  // @@protoc_insertion_point(field_set:agent.IrisInferenceRequest.petal_width)
}
inline float IrisInferenceRequest::_internal_petal_width() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.petal_width_;
}
inline void IrisInferenceRequest::_internal_set_petal_width(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.petal_width_ = value;
}

// -------------------------------------------------------------------

// IrisInferenceResponse

// string species = 1;
inline void IrisInferenceResponse::clear_species() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.species_.ClearToEmpty();
}
inline const std::string& IrisInferenceResponse::species() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agent.IrisInferenceResponse.species)
  return _internal_species();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IrisInferenceResponse::set_species(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.species_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:agent.IrisInferenceResponse.species)
}
inline std::string* IrisInferenceResponse::mutable_species() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_species();
  // @@protoc_insertion_point(field_mutable:agent.IrisInferenceResponse.species)
  return _s;
}
inline const std::string& IrisInferenceResponse::_internal_species() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.species_.Get();
}
inline void IrisInferenceResponse::_internal_set_species(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.species_.Set(value, GetArena());
}
inline std::string* IrisInferenceResponse::_internal_mutable_species() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.species_.Mutable( GetArena());
}
inline std::string* IrisInferenceResponse::release_species() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:agent.IrisInferenceResponse.species)
  return _impl_.species_.Release();
}
inline void IrisInferenceResponse::set_allocated_species(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.species_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.species_.IsDefault()) {
          _impl_.species_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.IrisInferenceResponse.species)
}

// -------------------------------------------------------------------

// MnistInferenceRequest

// string id = 1;
inline void MnistInferenceRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& MnistInferenceRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agent.MnistInferenceRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MnistInferenceRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:agent.MnistInferenceRequest.id)
}
inline std::string* MnistInferenceRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:agent.MnistInferenceRequest.id)
  return _s;
}
inline const std::string& MnistInferenceRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void MnistInferenceRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* MnistInferenceRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* MnistInferenceRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:agent.MnistInferenceRequest.id)
  return _impl_.id_.Release();
}
inline void MnistInferenceRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.MnistInferenceRequest.id)
}

// string file_path = 2;
inline void MnistInferenceRequest::clear_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& MnistInferenceRequest::file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agent.MnistInferenceRequest.file_path)
  return _internal_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MnistInferenceRequest::set_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:agent.MnistInferenceRequest.file_path)
}
inline std::string* MnistInferenceRequest::mutable_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:agent.MnistInferenceRequest.file_path)
  return _s;
}
inline const std::string& MnistInferenceRequest::_internal_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_path_.Get();
}
inline void MnistInferenceRequest::_internal_set_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_path_.Set(value, GetArena());
}
inline std::string* MnistInferenceRequest::_internal_mutable_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.file_path_.Mutable( GetArena());
}
inline std::string* MnistInferenceRequest::release_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:agent.MnistInferenceRequest.file_path)
  return _impl_.file_path_.Release();
}
inline void MnistInferenceRequest::set_allocated_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_path_.IsDefault()) {
          _impl_.file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.MnistInferenceRequest.file_path)
}

// -------------------------------------------------------------------

// MnistInferenceResponse

// string file_path = 1;
inline void MnistInferenceResponse::clear_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& MnistInferenceResponse::file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agent.MnistInferenceResponse.file_path)
  return _internal_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MnistInferenceResponse::set_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:agent.MnistInferenceResponse.file_path)
}
inline std::string* MnistInferenceResponse::mutable_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:agent.MnistInferenceResponse.file_path)
  return _s;
}
inline const std::string& MnistInferenceResponse::_internal_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_path_.Get();
}
inline void MnistInferenceResponse::_internal_set_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_path_.Set(value, GetArena());
}
inline std::string* MnistInferenceResponse::_internal_mutable_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.file_path_.Mutable( GetArena());
}
inline std::string* MnistInferenceResponse::release_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:agent.MnistInferenceResponse.file_path)
  return _impl_.file_path_.Release();
}
inline void MnistInferenceResponse::set_allocated_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_path_.IsDefault()) {
          _impl_.file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:agent.MnistInferenceResponse.file_path)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace agent


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_agent_2eproto_2epb_2eh
